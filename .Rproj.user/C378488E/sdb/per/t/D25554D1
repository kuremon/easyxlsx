{
    "contents" : "#' @title Retrieve values at LOD in a data frame.\n#' @param data the data to apply LOD split on.\n#' @param except the index or names of the columns that won't be modified.\n#' @param value.only if \\code{value.only} is true, only the numeric data frame is returned.\n#' Otherwise a list with the numeric data and the indexes is returned.\n#' @param transform a function that transform the value in returned data.\n#' @export\nlodsplit=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  UseMethod(\"lodsplit\",x)\n}\n\n#' @S3method lodsplit numeric\n#' @method lodsplit numeric\nlodsplit.numeric=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  x\n}\n\n#' @S3method lodsplit character\n#' @method lodsplit character\nlodsplit.character=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  n=length(x)\n  values=numeric(n)\n  \n  m=regexec(x,pattern=pattern)\n  x.matches=regmatches(x,m,invert=TRUE)\n  suppressWarnings(values <- sapply(x.matches,function(el)as.numeric(el[el!=\"\"])))\n\n  lod=sapply(regmatches(x,m),length)==1\n  lod[is.na(values)]=NA\n  \n  values[which(lod)]=transform(values[which(lod)])\n  \n  if(values.only) return(values)\n  list(values=values,lod=lod)\n}\n\n#' @S3method lodsplit matrix\n#' @method lodsplit matrix\nlodsplit.matrix=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  dim.x=dim(x)\n  L=lodsplit(as.vector(x),values.only,pattern,transform)\n  if(values.only) return(L)\n  list(values=as.matrix(L$values,dim.x),lod=as.matrix(L$lod,dim.x))\n}\n\n#' @S3method lodsplit data.frame\n#' @method lodsplit data.frame\nlodsplit.data.frame=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  #except.index=get_col.index(colnames(x),except)\n  idx=sapply(x,is.character)\n  \n lodsplit.matrix(as.matrix(x[idx])) \n}\n\n\n#' @S3method lodsplit list\n#' @method lodsplit list\nlodsplit.list=function(x,values.only=TRUE,pattern=\"^<\",transform=identity){\n  lodsplit(do.call(c,x),values.only,pattern,transform)\n}\n\n#   l.split=length(split)\n#   if(l.split==0){\n#     value=NA\n#   }\n#   else{\n#     value= # to avoid raising a warning with \"NA\" value.\n#   }\n#   (l.split>1))\n# }\n# \n# lodsplit.base.value.only=function(str){\n#   lodsplit.base(str)$value  \n# }\n\n# lodsplit2=function(data,except=NULL,except.col=except,value.only=TRUE){\n#   col.index=get_col.index(colnames(data),except.col)\n#   if(value.only){\n#     fun=Vectorize(lodsplit.base.value.only)\n#   }\n#   else{\n#     fun=Vectorize(lodsplit.base)\n#   }\n#   data[col.index]=colwise(fun)(data[col.index])\n#   data\n# }\n\n\n\n\n# lodsplit.matrix=function(data,,value.only=TRUE,transform=identity){\n#   col.index=get_col.index(colnames(data),except)\n#   \n#   M=as.matrix(data[col.index])\n#   \n#   split=strsplit(M,split='<')\n#   split.value=transform(matrix(sapply(split,function(x)as.numeric(tail(x,1))),dim(M)))\n#   \n#   data[col.index]=split.value\n#   \n#   if(value.only) return(data)\n#   is.split=matrix(FALSE,nrow(data),ncol(data))\n#   is.split[,col.index]=sapply(split,length)>1\n#   list(data=data,index=which(is.split,arr.ind=TRUE))\n# }\n\n\n",
    "created" : 1385515757209.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "687560932",
    "id" : "D25554D1",
    "lastKnownWriteTime" : 1385515983,
    "path" : "~/R&D/R packages/Source packages/easyxlsx/R/lodsplit.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}